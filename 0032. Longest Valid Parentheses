Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.




C++

class Solution {
public:
    int longestValidParentheses(string s) {
        int ans = 0, start =0, n=s.size();
        stack<int> st;
        for (int i=0; i<s.size(); i++)
            if(s[i]=='(') st.push(i);
            else if (s[i]==')'){
                if(st.empty()) start = i+1;
                else{
                    st.pop();
                    ans = st.empty() ? max(ans, i-start + 1) : max(ans, i-st.top());
                }
            }
        return ans;
    }
};












dp


class Solution {
public:
    int longestValidParentheses(string s) {
        int ans = 0;
        vector<int> dp(s.length(), 0);
        for (int i =1; i<s.length(); i++){
            if(s[i]==')'){
                if(s[i-1]=='('){
                    dp[i] = (i>=2?dp[i-2]:0)+2;
                }
                else if((i-dp[i-1])>0 && s[i-dp[i-1]-1]=='('){
                    dp[i] = dp[i-1]+((i - dp[i - 1] )>=2? dp[i - dp[i - 1] - 2] : 0)+2;
                }
                
            }
            ans = max(ans, dp[i]);
        }
        return ans;
    }
};

Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Notice that the solution set must not contain duplicate quadruplets.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [], target = 0
Output: []
 

Constraints:

0 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109


This is a general solution which is applicable for k-sum.

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def ksum(nums: List[int], target: int, k: int) -> List[List[int]]:
            res = []
            if len(nums)==0 or k*nums[0]>target or k*nums[-1]<target:
                return res
            if k==2:
                return twosum(nums, target)
            for i in range(len(nums)):
                if i==0 or nums[i]!=nums[i-1]:
                    for _, sumnext in enumerate(ksum(nums[i+1:], target-nums[i], k-1)):
                        res.append([nums[i]]+sumnext)
            return res
        
        def twosum(nums: List[int], target: int) -> List[List[int]]:
            res=[]
            lo, hi = 0, len(nums)-1
            while lo < hi:
                tol = nums[lo] + nums[hi]
                if tol < target:
                    lo += 1
                elif tol > target:
                    hi -= 1
                else:
                    res.append([nums[lo], nums[hi]])
                    lo += 1
                    hi -= 1
                    while lo<hi and nums[lo]==nums[lo-1]:
                        lo+=1
                    while lo<hi and nums[hi]==nums[hi+1]:
                        hi-=1
            return res
        nums.sort()
        return ksum(nums, target, 4)
        
        
        
Commets:
The two pointers pattern requires the array to be sorted, so we do that first. 
Also, it's easier to deal with duplicates if the array is sorted: repeated values are next to each other and easy to skip.
For 3Sum, we enumerate each value in a single loop, and use the two pointers pattern for the rest of the array. 
For kSum, we will have k - 2 nested loops to enumerate all combinations of k - 2 values.

Algorithm

We can implement k - 2 loops using a recursion. 
We will pass the starting point and k as the parameters. When k == 2, we will call twoSum, terminating the recursion.

For the main function:

Sort the input array nums.
Call kSum with start = 0, k = 4, and target, and return the result.

For ksum function:

Check if the sum of k smallest values is greater than target, or the sum of k largest values is smaller than target. 
Since the array is sorted, the smallest value is nums[start], and largest - the last element in nums.
If so, no need to continue - there are no k elements that sum to target.
If k equals 2, call twoSum and return the result.
Iterate i through the array from start:
If the current value is the same as the one before, skip it.
Recursively call kSum with start = i + 1, k = k - 1, and target - nums[i].
For each returned set of values:
Include the current value nums[i] into set.
Add set to the result res.
Return the result res.

For twosum function:

Set the low pointer lo to start, and high pointer hi to the last index.
While low pointer is smaller than high:
If the sum of nums[lo] and nums[hi] is less than target, increment lo.
Also increment lo if the value is the same as for lo - 1.
If the sum is greater than target, decrement hi.
Also decrement hi if the value is the same as for hi + 1.
Otherwise, we found a pair:
Add it to the result res.
Decrement hi and increment lo.
Return the result res.















C++

class Solution {
public:
  vector<vector<int>> fourSum(vector<int> &num, int target) {
    set<vector<int>> h; 
 
    sort(num.begin(), num.end());
 
    int n = num.size();
 
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        for(int k = j + 1; k < n; k++) {
          int t = target - num[i] - num[j] - num[k];
          if (t < num[k]) break;
          if (!std::binary_search(num.begin() + k + 1, num.end(), t)) continue;          
          h.insert({num[i], num[j], num[k], t});          
        }
      }
    }
    return vector<vector<int>>(begin(h), end(h));
  }
};





hash table

class Solution {
public:
  vector<vector<int>> fourSum(vector<int> &num, int target) {        
    sort(num.begin(), num.end());
    if (target > 0 && target > 4 * num.back()) return {};
    if (target < 0 && target < 4 * num.front()) return {};
    
    unordered_map<int, int> index;
    for (int i = 0; i < num.size(); ++i)
      index[num[i]] = i;
    
    set<vector<int>> h;    
    int n = num.size();
 
    for (int i = 0; i < n; i++) {   
      for (int j = i + 1; j < n; j++) {                
        for(int k = j + 1; k < n; k++) {
          int t = target - num[i] - num[j] - num[k];
          if (t < num[k]) break;
          auto it = index.find(t);
          if (it == index.end() || it->second <= k) continue;
          h.insert({num[i], num[j], num[k], t});
        }           
      }
    }
 
    return vector<vector<int>>(begin(h), end(h));
  }
};

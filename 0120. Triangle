Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104
 

Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?







C++


1 dp 

use dp to represent the sum, need find the min sum of above triangles

If row == 0: This is the top of the triangle: it stays the same.
If col == 0: There is only one cell above, located at (row - 1, col).
If col == row: There is only one cell above, located at (row - 1, col - 1).
In all other cases: There are two cells above, located at (row - 1, col - 1) and (row - 1, col) .

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                if(i==0){
                    dp[i][j]=triangle[i][j];
                }
                else{
                    dp[i][j] = min(0<j?dp[i-1][j-1]:INT_MAX, j<i?dp[i-1][j]:INT_MAX) + triangle[i][j];
                }
            }
        }
        return *min_element(dp[n-1].begin(),dp[n-1].end());
    }
};





2. Dp 


class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<int> dp(n, 0);
        int dp_im1_j=INT_MAX, dp_im1_jm1=INT_MAX;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                dp_im1_j = dp[j];
                if(i==0){
                    dp[j]=triangle[i][j];
                }
                else{
                    dp[j] = min(0<j?dp_im1_jm1:INT_MAX, j<i?dp_im1_j:INT_MAX) + triangle[i][j];
                }
                dp_im1_jm1 = dp_im1_j;
            }
        }
        return *min_element(dp.begin(),dp.end());
    }
};

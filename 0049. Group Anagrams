Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.



class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res = defaultdict(list)
        if len(strs)==0 or len(strs)==1:
            return [strs]
        for s in strs:
            res[tuple(sorted(s))].append(s)
        return res.values()
# dict and defaultdict are exactly the same except that defaultdict will not return a Keyerror when the value is not exist. like strs=['ae', '', 'ea']
# dictionary's key must be single value or a tuple, cannot be alist, because it is immutable and unique.

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45




C++

1. BRUTE FORCE, recursion

class Solution {
public:
    int cb(int i, int n){
        if(i>n){
            return 0;
        }
        if(i==n){
            return 1;
        }
        return cb(i+1, n)+cb(i+2, n);
    }
    int climbStairs(int n) {
        return cb(0,n);
    }
};





2. recusion with memo

class Solution {
public:
    int cb(int i, int n, vector<int> &memo){
        if(i>n){
            return 0;
        }
        if(i==n){
            return 1;
        }
        if(memo[i]>0){
            return memo[i];
        }
        return memo[i] = cb(i+1, n,memo)+cb(i+2, n,memo);
    }
    int climbStairs(int n) {
        vector<int> memo(n+1,0);
        return cb(0,n,memo);
    }
};



3. dp

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, 0);
        if(n==1){
            return 1;
        }
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};

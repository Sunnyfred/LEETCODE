Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.




class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s)<2:
            return len(s)
        location={}
        i, l = -1, 0
        for j in range(len(s)):
            if s[j] in location:
                i = max(location[s[j]], i)
            location[s[j]]=j
            l = max(j-i, l)
        return l






C++

1. Brute force

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len = s.length();
        int ans = 0;
        
        for (int i =0; i< len; i++){
            for (int j =i; j< len; j++) {
                if(repeateornot(s, i, j)){
                    ans = max(ans, j-i+1);
                }
            }
        }
        return ans;
    }
    
    bool repeateornot(string& s, int start, int end){
        vector<int> table(128);                            
        for (int i = start; i <= end; i++){
            char c = s[i];
            table[c]++;
            if(chars[c]>1){
                return false;
            }
        }
        return true;
    }
};




2. Two pointers  

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> table(128);
        int left = 0;
        int right = 0;
        int ans=0;
        
        while (right<s.length()) {                  // right pointer for extending sliding window
            char r = s[right];
            table[r]++;
            while (table[r]>1){                     // left pointer for contracting sliding window
                char l = s[left];
                table[l]--;
                left++;
            }
            ans = max(ans, right-left+1);
            right++;
        }
        
        return ans;
    }
    

};


3. Direct access table

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> table(128, -1);                           // -1 is the senital value to represent null
        int left=0, right=0;
        int ans=0;
        
        while(right<s.length()){
            char r = s[right];
            int index = table[r];
            if(index!=-1 && index>=left && index<right) {   // direct access table
                left = index+1;
            }
            ans = max(ans, right-left+1);
            table[r] = right;
            right++;            
        }
        return ans;
    }
};

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30



1. brute force

class Solution {
public:
    int fib(int n) {
        if(n<=1){
            return n;
        }
        return fib(n-1) + fib(n-2);
    }
};

Time complexity: O(2^N) This is the slowest way to solve the Fibonacci Sequence because it takes exponential time. 
The amount of operations needed, for each level of recursion, grows exponentially as the depth approaches N.

Space complexity: O(N). We need space proportional to N to account for the max size of the stack, in memory. 
This stack keeps track of the function calls to fib(N). This has the potential to be bad in cases that there isn't
enough physical memory to handle the increasingly growing stack, leading to a StackOverflowError. 
The Java docs have a good explanation of this, describing it as an error that occurs because an application recurses too deeply.



2. using array

class Solution {
public:
    int fib(int n) {
        if(n<=1){
            return n;
        }
        
        int* cache = new int[n+1];
        cache[1] = 1;
        cache[0] = 0;
        for (int i=2; i<=n; i++){
            cache[i] = cache[i-1] + cache[i-2];
        }
        return cache[n];
    }
};

Algorithm

If N is less than or equal to 1, return N
Otherwise, iterate through N, storing each computed answer in an array along the way.
Use this array as a reference to the 2 previous numbers to calculate the current Fibonacci number.
Once we've reached the last number, return it's Fibonacci number.

Time complexity: O(N)O(N). Each number, starting at 2 up to and including N, is visited, computed and then stored for O(1)O(1) access later on.

Space complexity: O(N)O(N). The size of the data structure is proportional to N.



3. use has table

class Solution {
public:
    map<int,int> mymap;
    int fib(int n) {
        mymap.insert(pair<int, int>(0, 0));
        mymap.insert(pair<int, int>(1, 1));
        if(mymap.find(n)!=mymap.end()){
                return mymap.find(n)->second;
        }
        mymap.insert(pair<int, int>(n, fib(n-1)+fib(n-2)));
        return mymap.find(n)->second;
    }
};

Algorithm

At first, create a map with 0 -> 0 and 1 -> 1 pairs.
Call fib(N) function.
At every recursive call of fib(N), if N exists in the map, return the cached value for N.
Otherwise, set the key N, in our mapping, to the value of fib(N - 1) + fib(N - 2) and return the computed value.


Time complexity: O(N)O(N). Each number, starting at 2 up to and including N, is visited, computed and then stored for O(1)O(1) access later on.

Space complexity: O(N)O(N). The size of the stack in memory is proportional to N. Also, the memoization hash table is used, which occupies O(N)O(N) space.


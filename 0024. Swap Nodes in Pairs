Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes. Only nodes itself may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100


Recusion:
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        
        if not head or not head.next:
            return head
        
        fn = head
        sn = head.next
        
        fn.next = self.swapPairs(sn.next)
        sn.next = fn
        
        return sn
        
        
or 

Iteration:
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        head0 = ListNode(-1)
        head0.next = head
        carry = head0
        
        while head and head.next:
        
            fn = head         # define pair
            sn = fn.next
            
            carry.next = sn   # used to record the correct order for head0.next
            carry = fn
            
            fn.next = sn.next # swap order
            sn.next = fn
            
            head = fn.next # move on to next pair
            
        return head0.next


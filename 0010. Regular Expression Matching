Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: 

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input: s = "aab", p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
Example 5:

Input: s = "mississippi", p = "mis*is*p*."
Output: false
 

Constraints:

0 <= s.length <= 20
0 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.




class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        if not p:
            return not s

        first_match = bool(s) and p[0] in {s[0], '.'}

        if len(p) >= 2 and p[1] == '*':
            return (self.isMatch(s, p[2:]) or
                    first_match and self.isMatch(s[1:], p))
        else:
            return first_match and self.isMatch(s[1:], p[1:])
            
#If a star is present in the pattern, it will be in the second position \text{pattern[1]}pattern[1].
#Then, we may ignore this part of the pattern, or delete a matching character in the text. 
#If we have a match on the remaining strings after any of these operations, then the initial inputs matched.            
            
            
            
            
            
            
            
            
            
            
            
            
C++

1. Recursion



check fisrt char
    fistmatch = same || p[0]=='.', if match, use first char in p, or not use first char in p

if use first char in p and p[1]=='*'
     fisrtmatch && ismatch(s.substr(1), p)
if not use first char in p  and p[1]=='*', discard first 2 chars in p, because '*' means zero time of preceding element 
     ismatch(s.substr, p.substr(2))
 if use fisrt char in p but p[i]!='*', this is regular case, just check one by one
     fisrtmatch && ismatch(s.substr(1), p.substr(1))
     

class Solution {
public:
    bool isMatch(string s, string p) {
        if(p.size()==0) return s.size()==0;
        bool firstmatch = (s.size()>0) && ((p[0]=='.') || (p[0]==s[0]));
        if(p.size()>=2 && p[1]=='*'){
            return (firstmatch && isMatch(s.substr(1), p)) || (isMatch(s, p.substr(2)));
        }
        else{
            return firstmatch && isMatch(s.substr(1), p.substr(1));     // if p.szie()=1, then p.substr(1).size()==0, do the recursive step, it return false
        }
    }
};






2. DP





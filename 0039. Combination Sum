Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
Example 4:

Input: candidates = [1], target = 1
Output: [[1]]
Example 5:

Input: candidates = [1], target = 2
Output: [[1,1]]
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500





class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = []
        def backtrack(remain, c, current_index):
            if remain==0:
                result.append(list(c)) # end criterion
            elif remain<0:
                return  # remove criterion
            
            for i in range(current_index, len(candidates)):
                c.append(candidates[i])
                backtrack(remain-candidates[i], c, i)
                c.pop()
    
        backtrack(target, [], 0)
        return result
  
Intuition

As a reminder, backtracking is a general algorithm for finding all (or some) solutions to some computational problems. 
The idea is that it incrementally builds candidates to the solutions, and abandons a candidate ("backtrack") as soon as 
it determines that this candidate cannot lead to a final solution.

Specially, to our problem, we could incrementally build the combination, and once we find the current combination is not valid, 
we backtrack and try another option.

Algorithm

As one can see, the above backtracking algorithm is unfolded as a DFS (Depth-First Search) tree traversal, which is often implemented with recursion.

Here we define a recursive function of backtrack(remain, comb, start) (in Python), which populates the combinations, 
tarting from the current combination (comb), the remaining sum to fulfill (remain) and the current cursor (start) to the list of candidates. 
Note that, the signature of the recursive function is slightly different in Java. But the idea remains the same.

For the first base case of the recursive function, if the remain==0, i.e. we fulfill the desired target sum, 
therefore we can add the current combination to the final list.

As another base case, if remain < 0, i.e. we exceed the target value, we will cease the exploration here.

Other than the above two base cases, we would then continue to explore the sublist of candidates as [start ... n]. 
For each of the candidate, we invoke the recursive function itself with updated parameters.

Specifically, we add the current candidate into the combination.

With the added candidate, we now have less sum to fulfill, i.e. remain - candidate.

For the next exploration, still we start from the current cursor start.

At the end of each exploration, we backtrack by popping out the candidate out of the combination.



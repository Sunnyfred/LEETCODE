Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100



class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        #boolean to check if next permutation is possible
        change = False
        
        # iterate from the back of array
        for i in range(len(nums)-1,0,-1):
            # if we get a decreasing element
            if nums[i-1] < nums[i]:
                #next permutation possible
                change = True
                # record it's index
                index = i-1
                #we only need first decreasing element
                break
        
        #if no next permu possible , sort it.
        if change == False:
            nums.sort()
            return 
        
        # iterate from back till before that index
        for i in range(len(nums)-1,index,-1):
            # Since the array is in decresing from back , we need element just larger than one at index
            if nums[i]>nums[index]:
                # we swap it for next permu and the sequence is still decreasing
                nums[i],nums[index] = nums[index],nums[i]
                # so we just reverse it 
                nums[index+1:] = reversed(nums[index+1:])
                return 













C++



class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i = nums.size()-2;
        while(i>=0 && nums[i+1]<=nums[i]) --i;
        if(i>=0){
            int j = nums.size() - 1;
            while(j>=0 && nums[j]<=nums[i]) --j;
            swap(nums[i],nums[j]);
        }
        sort(nums.begin()+i+1, nums.end());
    }
};

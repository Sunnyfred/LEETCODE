
6. ZigZag Conversion
Medium

1891

5006

Add to List

Share
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:

Input: s = "A", numRows = 1
Output: "A"
 

Constraints:

1 <= s.length <= 1000
s consists of English letters (lower-case and upper-case), ',' and '.'.
1 <= numRows <= 1000




class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        zigzag = ['' for i in range(numRows)]
        index = 0 
        full_present = 1
        for c in s:
            zigzag[index] += c
            if(index==numRows-1 and full_present==1):
                full_present=0
            elif(index==0 and full_present==0):
                full_present=1
            if(full_present==1):
                index += 1
            else:
                index -= 1
        return ''.join(zigzag)






c++


Approach 1: Sort by Row
Intuition

By iterating through the string from left to right, we can easily determine which row in the Zig-Zag pattern that a character belongs to.

Algorithm

We can use \text{min}( \text{numRows}, \text{len}(s))min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern.

Iterate through ss from left to right, appending each character to the appropriate row. The appropriate row can be tracked using two variables: the current row and the current direction.

The current direction changes only when we moved up to the topmost row or moved down to the bottommost row.


class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows==1) return s;
        bool goingdown = false;
        int row_n = 0;
        vector<string> row(min(numRows, int(s.size())));
        for (int i =0; i<s.size(); i++){
            row[row_n]+=s[i];
            if(row_n==0 || row_n==numRows-1) goingdown = !goingdown;
            row_n += goingdown?1:-1;
        }
        string ans;
        for(string r : row) ans+=r;
        return ans;
    }
};


Complexity Analysis

Time Complexity: O(n)O(n), where n == \text{len}(s)n==len(s)
Space Complexity: O(n)O(n)




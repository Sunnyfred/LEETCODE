Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].



class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {
            '2': ['a', 'b', 'c'],
            '3': ['d', 'e', 'f'],
            '4': ['g', 'h', 'i'],
            '5': ['j', 'k', 'l'],
            '6': ['m', 'n', 'o'],
            '7': ['p', 'q', 'r', 's'],
            '8': ['t', 'u', 'v'],
            '9': ['w', 'x', 'y', 'z'],
                }
        res = []
        strings = ''
        def track(strings, digits):
            if len(digits)==0:
                res.append(strings)
            else:
                for letter in phone[digits[0]]:
                    #strings += letter wrong command!!!
                    track(strings+letter, digits[1:])
        if digits:
            track(strings, digits)
        return res
        
        
        
        
C++

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty()){
            return vector<string>();
        }
        vector<int> int_dig;
        for (char c : digits){
            int_dig.push_back(c-'0');
        }
        vector<string> ans;
        generate(ans, int_dig, "", 0);
        return ans;
    }
    
    void generate(vector<string>& ans, vector<int> & int_dig, string curr, int index){
        const string lookup[10] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tvu", "wxyz"};
        
        if(index>=int_dig.size()){ //stopping criteria
            ans.push_back(curr);
            return;
        }
        string tmp = lookup[int_dig[index]];
        for(char c : tmp){
            generate(ans, int_dig, curr+c, index+1);
        }
    }
};

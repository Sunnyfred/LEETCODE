Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105




class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res=[]
        nums.sort()
        for i in range(len(nums)):
            if nums[i]>0:
                break
            if i==0 or nums[i-1] != nums[i]:
                self.twoSumII(nums, i, res)
        return res
    
    def twoSumII(self, nums: List[int], i: int, res: List[List[int]]):
        lo, hi = i+1, len(nums)-1
        while lo<hi:
            tol = nums[i] + nums[lo] + nums[hi]
            if tol < 0:
                lo += 1
            elif tol > 0:
                hi -= 1
            else:
                res.append([nums[i], nums[lo], nums[hi]])
                lo += 1
                hi -= 1
                while lo<hi and nums[lo]==nums[lo-1]:
                    lo+=1 








C++

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        for(int i=0; i<nums.size() && nums[i] <= 0; i++){
            if(i==0||nums[i-1]!=nums[i]){
                twosum(nums,i,ans);
            }
        }
        return ans;
    }
    void twosum(vector<int>& nums, int i, vector<vector<int>> & ans){
        int l = i+1, r=nums.size()-1;
        while(l<r){
            int sum = nums[i] + nums[l] + nums[r];
            if(sum<0){
                l++;
            }
            else if(sum>0){
                r--;
            }
            else{
                ans.push_back({nums[i], nums[l], nums[r]});
                l++;
                r--;
                while(l<r && nums[l]==nums[l-1]){
                    l++;
                }
            }
        }
    }
};




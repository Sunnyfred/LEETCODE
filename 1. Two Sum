Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.



class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
         ls = len(nums)
         for i in range(ls):
             for j in range(i + 1, ls):
                 if nums[i] + nums[j] == target:
                     return [i, j] 
or


use hash table (hash map): A hash table is a special collection that is used to store key-value items. 
So instead of storing just one value like the stack, array list and queue, the hash table stores 2 values. 
These 2 values form an element of the hash table.
Use hash function (hash = hashfunc(key), index = hash % array_size)


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashtable={}
        for index, num in enumerate(nums):
            rest = target - num
            try:
                hashtable[rest]
                return [hashtable[rest], index]
            except KeyError:
                hashtable[num]=index  
                
                
                
                
        

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        if not head:
            return head # if null, return null
        second, first = head, head
        while n>0:
            if not first.next:
                return head.next # if len(head)=n, return head.next
            first = first.next
            n = n - 1
        while first.next:
            first = first.next
            second = second.next
        second.next = second.next.next
        return head












C++


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int length;
        ListNode* currentnode = head;
        while(currentnode!=nullptr){
            currentnode = currentnode->next;
            length++;
        }
        if(length==n){
            return head->next;
        }
        int nodebeforeindex = length - n -1;
        currentnode = head;
        for (int i=0; i<nodebeforeindex; i++){
            currentnode = currentnode->next;
        }
        currentnode->next = currentnode->next->next;
        return head;
    }
};



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* currentnode = head;
        for(int i=0; i< n; i++){
            currentnode = currentnode->next;
        }
        if(currentnode==nullptr){
            return head->next;
        }
        ListNode* nodebeforeindex = head;
        while(currentnode->next!=nullptr){
            currentnode = currentnode->next;
            nodebeforeindex = nodebeforeindex-> next;
        }
        nodebeforeindex->next = nodebeforeindex->next->next;
        return head;
    }
};

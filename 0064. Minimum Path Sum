Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100




C++


1.brute force recursion


class Solution {
public:
    int sum(vector<vector<int>>& grid, int i, int j){
        if(i==grid.size()-1 && j==grid[0].size()-1) return grid[i][j];
        if(i==grid.size() || j==grid[0].size()) return INT_MAX;
        return grid[i][j]+min(static_cast<int>(sum(grid, i+1, j))+static_cast<int>(sum(grid, i, j+1)));
    }
    int minPathSum(vector<vector<int>>& grid) {
        return sum(grid, 0, 0);
    }
};




2. dp2D


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid){
        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size()));
        for (int i = grid.size() - 1; i >= 0; i--) {
            for (int j = grid[0].size() - 1; j >= 0; j--) {
                if(i==grid.size()-1 && j!=grid[0].size()-1){
                    dp[i][j]=grid[i][j]+dp[i][j+1];
                }
                else if(i!=grid.size()-1 && j==grid[0].size()-1){
                    dp[i][j]=grid[i][j]+dp[i+1][j];
                }
                else if(i!=grid.size()-1 && j!=grid[0].size()-1){
                    dp[i][j]=grid[i][j]+min(dp[i+1][j],dp[i][j+1]);
                }
                else{
                    dp[i][j]=grid[i][j];
                }
            }
        }
        return dp[0][0];
    }
};

3. dp 1d

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid){
        vector<int> dp(grid[0].size());
        for (int i = grid.size() - 1; i >= 0; i--) {
            for (int j = grid[0].size() - 1; j >= 0; j--) {
                if(i==grid.size()-1 && j!=grid[0].size()-1){
                    dp[j]=grid[i][j]+dp[j+1];
                }
                else if(i!=grid.size()-1 && j==grid[0].size()-1){
                    dp[j]=grid[i][j]+dp[j];
                }
                else if(i!=grid.size()-1 && j!=grid[0].size()-1){
                    dp[j]=grid[i][j]+min(dp[j],dp[j+1]);
                }
                else{
                    dp[j]=grid[i][j];
                }
            }
        }
        return dp[0];
    }
};

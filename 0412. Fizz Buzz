Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.
 

Example 1:

Input: n = 3
Output: ["1","2","Fizz"]
Example 2:

Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
Example 3:

Input: n = 15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
 

Constraints:

1 <= n <= 104





1. intuition

class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> ans(n);
        for (int i=0; i<n; i++){
            if((i+1)%15==0){
                ans[i]="FizzBuzz";
            }
            else if((i+1)%5==0){
                ans[i]="Buzz";
            }
            else if((i+1)%3==0){
                ans[i]="Fizz";
            }
            else{
                ans[i]=to_string(i+1);
            }
        }
        return ans;
    }
};


Complexity Analysis

Time Complexity: O(N)O(N)
Space Complexity: O(1)O(1)




2. hash table


class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> ans;
        map<int, string> map = {{3,"Fizz"},{5,"Buzz"}};
        for (int i=1; i<n+1; i++){
            string s="";
            for(const pair<int, string>& p: map)
                if(i%p.first==0)
                    s+=p.second;
            if(s=="")
                s=to_string(i);
            ans.push_back(s);
        }
        return ans;
    }
};

Complexity Analysis

Time Complexity: O(N)O(N)
Space Complexity: O(1)O(1)

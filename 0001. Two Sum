Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.



class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
         ls = len(nums)
         for i in range(ls):
             for j in range(i + 1, ls):
                 if nums[i] + nums[j] == target:
                     return [i, j] 
or


use hash table (hash map): A hash table is a special collection that is used to store key-value items. 
So instead of storing just one value like the stack, array list and queue, the hash table stores 2 values. 
These 2 values form an element of the hash table.
Use hash function (hash = hashfunc(key), index = hash % array_size)


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashtable={}
        for index, num in enumerate(nums):
            rest = target - num
            try:
                hashtable[rest]
                return [hashtable[rest], index]
            except KeyError:
                hashtable[num]=index  
                
                
                
C++ 

1. Brute force

vector<int> twoSum(vector<int>& nums, int target) {
    int len = nums.size();
    for(int i = 0; i < len; i++) {
        for(int j = i + 1; j < len; j++) {
            if(nums[j] == target - nums[i])
                return { i, j };
        }
    }
    return {-1, -1};
};

Time complexity : O(n^2). For each element, we try to find its complement by looping through the rest of array which takes O(n) time. Therefore, the time complexity is O(n^2).
Space complexity : O(1).
      
      
      
      
2. Two pointer

vector<int> twoSum(vector<int>& nums, int target) {
    int front = 0, rear = nums.size() - 1;
    sort(nums.begin(), nums.end());
    while(front < rear) {
      int sum = nums[front] + nums[rear];
      if (sum == target)
       break;
      else if (sum > target)
       rear--;
      else
       front++;
    }
    return {front, rear};
};

Time complexity : O(nlog(n)). sort function takes nlog(n) time.
Space complexity : O(1).




3. Hash Table
                
                
class Solution {
public:
    vector<int> nums;
    int target;

    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> map;
        vector<int> pairs;
        for(int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];
            if(map.find(complement) != map.end()) {                         //stopping criteria, check if complement is in hastable
                pairs.push_back(map.find(complement)->second);
                pairs.push_back(i);
                break;
            }
            map.insert(pair<int, int>(nums[i], i));
        }
        return pairs;

    }
};                
                
Time complexity : O(n). We traverse the list containing n elements only once. Each look up in the table costs only O(1) time.
Space complexity : O(n). The extra space required depends on the number of items stored in the hash table, which stores at most n elements.        

Implement pow(x, n), which calculates x raised to the power n (i.e. xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104

Recursion:
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n==0:
            return 1
        tmp = self.myPow(x, int(n/2))
        if n%2 == 0:
            return tmp*tmp
        else:
            if n>0:
                return x*tmp*tmp
            else:
                return tmp*tmp/x
                
10   <- 5     <-   2  <-  1  <- 0                
2^10 <- 2^4*2 <- 2*2 <- 2  <- 1
                
                
or
Iteration
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n<0:
            x=1/x
            n=-n
        tmp = x
        ans = 1
        while n>0:
            
            
            if(n%2==1):
                ans = ans*tmp
            tmp *= tmp
           
            n=int(n/2)
        return ans
        
n=10    ->   n=5          ->         n=2                  ->     n=1
ans=1   ->   ans=2*2      ->         ans=2*2              ->     ans=2*2*2^8
tmp=2*2 ->   tmp=2*2*2*2  ->         tmp=2*2*2*2*2*2*2*2  ->     tmp=2^16

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters








C++



What are the subproblems in this case? 
The idea is to process all characters one by one starting from either from left or right sides of both strings. 
Let us traverse from right corner, there are two possibilities for every pair of character being traversed.  

m: Length of str1 (first string)
n: Length of str2 (second string)
If last characters of two strings are same, nothing much to do. Ignore last characters and get count for remaining strings. So we recur for lengths m-1 and n-1.
Else (If last characters are not same), we consider all operations on ‘str1’, consider all three operations on last character of first string, recursively compute minimum cost for all three operations and take minimum of three values. 
Insert: Recur for m and n-1
Remove: Recur for m-1 and n
Replace: Recur for m-1 and n-1






1. basic recursive


class Solution {
public:
    int editdistance(string str1, string str2, int m, int n){
        if(m*n==0){
            return m+n;
        }
        if(str1[m-1]==str2[n-1]){
            return editdistance(str1, str2, m-1, n-1);
        }
        return 1+min(editdistance(str1, str2, m, n-1), //insert
                    min(editdistance(str1, str2, m-1, n),  //remove
                    editdistance(str1, str2, m-1, n-1)));//replace
    }
    int minDistance(string word1, string word2) {
        return editdistance(word1, word2, word1.size(), word2.size());
    }
};




2. dp

recomputations of same subproblems can be avoided



class Solution {
public:
    int editdistance(string str1, string str2, int m, int n){
        int dp[m+1][n+1];
        for(int i=0; i<m+1; i++){
            dp[i][0] = i;
        }
        for(int j=0; j<n+1; j++){
            dp[0][j] = j;
        }
        
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(str1[i-1]==str2[j-1]){
                    dp[i][j] = dp[i-1][j-1];    // no operation is required
                }
                else{
                    dp[i][j] = 1 + min(dp[i][j-1],min(dp[i-1][j], dp[i-1][j-1]));
                }
            }
        }
        return dp[m][n];
    }
    int minDistance(string word1, string word2) {
        return editdistance(word1, word2, word1.size(), word2.size());
    }
};



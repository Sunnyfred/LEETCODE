Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33
 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?








C++



1. brute force recusive


class Solution {
public:
    int getnum(int row, int col){
        if(row==0 || row==col || col==0 ){
            return 1;
        }
        return getnum(row-1, col)+getnum(row-1, col-1);
    }
    vector<int> getRow(int rowIndex) {
        vector<int> ans;
        for(int i=0; i<=rowIndex; i++){
            ans.push_back(getnum(rowIndex, i));
        }
        return ans;
    }
};






2. dp

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> curr, prev = {1};
        for(int i = 1; i<=rowIndex; i++){
            curr.assign(i+1, 1);
            for(int j=1; j<i; j++){
                curr[j] = prev[j] + prev[j-1];
            }
            prev = move(curr);  // move object curr to generate a rvalue refrence and move to lvalue
        }
        return prev;
    }
};




or 



class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> dp(rowIndex+1, 1);
        for(int i=1; i<rowIndex; i++){
            for(int j=i; j>0; j--){
                dp[j] = dp[j] + dp[j-1];
            }
        }
        return dp;
    }
};

Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
 

Constraints:

-2e31 <= x <= 2e31 - 1


class Solution:
    def reverse(self, x: int) -> int:
        ans = -int(str(-x)[::-1]) if x < 0 else int(str(x)[::-1])
        if ans > 2147483647 or ans < -2147483648:
            return 0
        return ans
        
or
        
class Solution:
    def reverse(self, x: int) -> int:
        str_num = str(x)
        new_str = ''
        if x==0:
            return x
        if str_num[0] == '-':
            str_n = str_num[1:]
            new_str = str_num[0] + str_n[::-1].lstrip('0')
        else:
            str_n = str_num[1:]
            new_str = str_num[::-1].lstrip('0')
        if int(new_str) > -1*2**31 and int(new_str) < 2**31 - 1:
            return int(new_str)
        else:
            return 0     

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?



1. intuitive
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans(nums.size());
        for (int i =0; i< nums.size(); i++){
            ans[i] = nums[i]*nums[i];
        }
        sort(ans.begin(), ans.end());    // this takes O(nlog(n)) in c++. This function internally uses IntroSort. In more details it is implemented using hybrid of QuickSort, HeapSort and InsertionSort.By default, it uses QuickSort but if QuickSort is doing unfair partitioning and taking more than N*logN time, it switches to HeapSort and when the array size becomes really small, it switches to InsertionSort. 
        return ans;
    }
};



2. two pointer to replace sort method

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans(nums.size());
        int l = 0;
        int r = nums.size()-1;
        for (int i = nums.size()-1; i >= 0; i--){
            if(abs(nums[l])<abs(nums[r])){
                ans[i]=nums[r]*nums[r];
                r--;
            }
            else {
                ans[i]=nums[l]*nums[l];
                l++;
            }
        }

        return ans;
    }
};


Complexity Analysis

Time Complexity: O(N)O(N), where NN is the length of A.

Space Complexity: O(N)O(N) if you take output into account and O(1)O(1) otherwise.

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

0 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lower-case English letters.




class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if strs=='' or len(strs)==0:
            return ""
        short=math.inf
        for string in strs:
            short=min(short, len(string))
        index=0
        while index<short:
            tmp=strs[0][index]
            for string in strs:
                if string[index]!=tmp:
                    return string[:index]
            index += 1
        return strs[0][:index] if index>0 else ""







C++


class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.size()==0) return "";
        int ans = INT_MAX;
        for (int i=0; i<strs.size()-1; i++){
            ans = min(ans, (int)min(strs[i].size(), strs[i+1].size()));
            while(strs[i].substr(0,ans)!=strs[i+1].substr(0,ans)){
                ans--;
            }
            if(ans==0) return "";
        }
        return strs[0].substr(0,ans);
    }
};





2. binary tree


class Solution {
public:
    bool iscommen(vector<string>& strs, int len){
        string str1 = strs[0].substr(0,len);
        for(int i=1; i< strs.size(); i++){
            if(strs[i].rfind(str1, 0) != 0) return false;
        }
        return true;
    }
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.size() == 0) return "";
        int min_width = INT_MAX;
        for(string str : strs) min_width = min(min_width, (int)str.size());
        int l = 1;
        int r = min_width;
        while(l<=r){
            int mid = (l+r)/2;
            if(iscommen(strs,mid)){
                l = mid+1;
            }
            else{
                r = mid -1;
            }
            
        }
        return strs[0].substr(0, r);
    }
};
